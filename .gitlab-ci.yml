stages:
  - prepare
  - build
  - combine
  - pack
  - deploy
  - notify

variables:
  GIT_DEPTH: "1"

mat_common:
  stage: prepare
  tags: 
    - linux
  script:
    # lua
    - wget -O - https://cdn02.moecube.com:444/ygopro-build-materials/lua-5.4.4.tar.gz | tar zfx -
    - mv lua-5.4.4 lua
    # sqlite3
    - wget -O - https://cdn02.moecube.com:444/ygopro-build-materials/sqlite-autoconf-3390300.tar.gz | tar zfx -
    - mv sqlite-autoconf-3390300 sqlite3
    # freetype
    - wget -O - https://cdn02.moecube.com:444/ygopro-build-materials/freetype-2.11.1.tar.gz | tar zfx -
    - mv freetype-2.11.1 freetype
    # irrlicht
    - ./.ci/prepare-irrlicht.sh
    # miniaudio
    - ./.ci/prepare-miniaudio.sh
    # premake
    - cp -rf premake/* .;
  artifacts:
    paths:
      - lua
      - freetype
      - sqlite3
      - irrlicht
      - miniaudio

mat_submodules:
  stage: prepare
  tags: 
    - linux
  script:
    - rm -rf ocgcore script
    - mkdir ocgcore script
    - git config --global --add safe.directory $CI_PROJECT_DIR
    - git submodule update --init
  artifacts:
    paths:
      - ocgcore
      - script

#mat_linux:
#  stage: prepare
#  tags:
#    - linux
#  script:
#    - apt update; apt -y install git wget tar
#    - ./.ci/prepare-irrlicht.sh
#    # - wget -O - https://cdn02.moecube.com:444/ygopro-build-materials/premake-5.0.0-beta5-linux.tar.gz | tar zfx -
#    # - env PROCESSOR_COUNT=$(nproc) ./.ci/libevent-prebuild.sh
#  artifacts:
#    paths:
#      # - premake5
#      - irrlicht
#      # - libevent-stable
#  image: git-registry.mycard.moe/mycard/docker-runner-base:debian11

mat_macos:
  stage: prepare
  tags:
    - linux
  script:
    - apt update; apt -y install wget tar
    - wget -O - https://cdn02.moecube.com:444/ygopro-build-materials/premake-5.0.0-beta5-macosx.tar.gz | tar zfx -
    - chmod +x premake5
  artifacts:
    paths:
      - premake5

mat_windows:
  stage: prepare
  tags:
    - linux
  script:
    - apt update; apt -y install wget tar patch p7zip-full
    # premake5.exe
    - wget https://cdn02.moecube.com:444/ygopro-build-materials/premake-5.0.0-beta5-windows.zip
    - 7z x -y premake-5.0.0-beta5-windows.zip
    # event
    - wget -O - https://cdn02.moecube.com:444/ygopro-build-materials/libevent-2.0.22-stable.tar.gz | tar zfx -
    - mv libevent-2.0.22-stable event
  artifacts:
    paths:
      - premake5.exe
      - event

exec_windows:
  stage: build
  tags:
    - vs
  dependencies:
    - mat_common
    - mat_windows
    - mat_submodules
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - bin/
      - obj/
  script:
    - bash -c 'cp -rf premake/* . ; cp -rf resource/* .'
    - '.\premake5.exe vs2019'
    - cmd /c '"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\msbuild.exe" build\YGOPro.sln /m /p:Configuration=Release'
    - copy bin\release\ygopro.exe .
  artifacts:
    paths:
      - ygopro.exe

exec_linux:
  stage: build
  tags:
    - linux
  image: git-registry.moenext.com/mycard/docker-ygopro-builder:latest
  dependencies:
    - mat_common
    #- mat_linux
    - mat_submodules
  variables:
    EVENT_INCLUDE_DIR: /usr/share/libevent-stable/include
    EVENT_LIB_DIR: /usr/share/libevent-stable/lib
    OPUS_INCLUDE_DIR: $CI_PROJECT_DIR/miniaudio/external-built/include/opus
    OPUS_LIB_DIR: $CI_PROJECT_DIR/miniaudio/external-built/lib
    OPUSFILE_INCLUDE_DIR: $CI_PROJECT_DIR/miniaudio/external-built/include/opus
    OPUSFILE_LIB_DIR: $CI_PROJECT_DIR/miniaudio/external-built/lib
    VORBIS_INCLUDE_DIR: $CI_PROJECT_DIR/miniaudio/external-built/include
    VORBIS_LIB_DIR: $CI_PROJECT_DIR/miniaudio/external-built/lib
    OGG_INCLUDE_DIR: $CI_PROJECT_DIR/miniaudio/external-built/include
    OGG_LIB_DIR: $CI_PROJECT_DIR/miniaudio/external-built/lib
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - bin/
      - obj/
  script:
    - ./.ci/build-opus.sh
    - premake5 gmake --build-freetype --build-sqlite
    - cd build
    - make config=release -j$(nproc)
    - cd ..
    - mv bin/release/YGOPro ./ygopro
    - strip ygopro
  artifacts:
    paths:
      - ygopro

.exec_macos_platform:
  stage: build
  dependencies:
    - mat_macos
    - mat_common
    - mat_submodules
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - bin/
      - obj/
  script: ./.ci/exec-macos-platform.sh
  artifacts:
    paths:
      - ygopro-platforms

exec_macos_platform_x86:
  extends: .exec_macos_platform
  tags:
    - macos
      
exec_macos_platform_m1:
  extends: .exec_macos_platform
  tags:
    - macos-m1
  variables:
    MAC_ARM: 1

exec_macos:
  stage: combine
  tags:
    - macos
  dependencies:
    - exec_macos_platform_x86
    - exec_macos_platform_m1
  script:
    - mkdir -p ygopro.app/Contents/MacOS ygopro.app/Contents/Frameworks;
    - lipo -create -output ygopro.app/Contents/MacOS/ygopro $(ls -1 ygopro-platforms/ygopro-platform-*);
    - mkdir ygopro.app/Contents/Resources;
    - mv resource/gframe/ygopro.icns ygopro.app/Contents/Resources/Icon.icns;
    - defaults write "$PWD/ygopro.app/Contents/Info.plist" "CFBundleIconFile" "Icon.icns";
    - defaults write "$PWD/ygopro.app/Contents/Info.plist" "CFBundleIdentifier" "moe.mycard.ygopro";

  artifacts:
    paths:
      - ygopro.app

#exec_macos_sign:
#  stage: sign
#  tags:
#    - macos
#  dependencies:
#    - exec_macos
#  script: ./.ci/sign-macos.sh
#  artifacts:
#    paths:
#      - ygopro.app
#  only:
#    - tags
#    - gitlabci

assets:
  stage: prepare
  tags:
    - linux
  script:
    - apt update; apt -y install tar wget git
    # starter pack
    - wget -O - https://code.moenext.com/mycard/ygopro-starter-pack/-/archive/master/ygopro-starter-pack-master.tar.gz | tar zfx -
    - mv ygopro-starter-pack-master/* .
    # sound
    - wget -O - https://code.moenext.com/mycard/ygopro-sounds/-/archive/master/ygopro-sounds-master.tar.gz | tar zfx -
    - mv ygopro-sounds-master/sound/* sound
    # fonts
    - git clone --depth=1 https://code.moenext.com/mycard/ygopro-fonts
    - mv ygopro-fonts/fonts .
    # pack
    - git clone --depth=1 https://code.moenext.com/mycard/ygopro-card-list
    - mv ygopro-card-list/pack .
  artifacts:
    paths:
      - deck
      - single
      - sound
      - fonts
      - pack
  only:
    - tags
    - gitlabci

assets_nonwindows:
  stage: prepare
  tags:
    - linux
  script:
    - apt update; apt -y install tar wget
    - wget -O - https://cdn02.moecube.com:444/windbot-mc/windbot.tar.gz | tar zfx -
  artifacts:
    paths:
      - bot.conf
      - windbot
      - bot
  only:
    - tags
    - gitlabci

assets_windows:
  stage: prepare
  tags:
    - linux
  script:
    - apt update; apt -y install wget p7zip-full
    - wget https://cdn02.moecube.com:444/windbot-mc/WindBot.7z
    - 7z x -y WindBot.7z
  artifacts:
    paths:
      - bot.conf
      - WindBot
      - Bot.exe
  only:
    - tags
    - gitlabci

assets_zh-CN:
  stage: build
  tags:
    - linux
  script: ./.ci/assets-locale.sh
  variables:
    TARGET_LOCALE: zh-CN
  artifacts:
    paths:
      - pics
      - cards.cdb
      - strings.conf
  only:
    - tags
    - gitlabci

assets_en-US:
  stage: build
  tags:
    - linux
  script: ./.ci/assets-locale.sh
  variables:
    TARGET_LOCALE: en-US
  artifacts:
    paths:
      - pics
      - cards.cdb
      - strings.conf
      - mat_submodules
  only:
    - tags
    - gitlabci

pack_windows_zh-CN:
  stage: pack
  tags:
    - linux
  dependencies:
    - assets
    - assets_windows
    - exec_windows
    - assets_zh-CN
    - mat_submodules
  script: ./.ci/pack-windows.sh
  variables:
    TARGET_LOCALE: zh-CN
  artifacts:
    paths:
      - dist
  only:
    - tags
    - gitlabci

pack_windows_zh-CN:
  stage: pack
  tags:
    - linux
  dependencies:
    - assets
    - assets_windows
    - exec_windows
    - assets_zh-CN
    - mat_submodules
  script: ./.ci/pack-windows.sh
  variables:
    TARGET_LOCALE: zh-CN
  artifacts:
    paths:
      - dist
  only:
    - tags
    - gitlabci

pack_windows_en-US:
  stage: pack
  tags:
    - linux
  dependencies:
    - assets
    - assets_windows
    - exec_windows
    - assets_en-US
    - mat_submodules
  script: ./.ci/pack-windows.sh
  variables:
    TARGET_LOCALE: en-US
  artifacts:
    paths:
      - dist
  only:
    - tags
    - gitlabci

pack_linux_zh-CN:
  stage: pack
  tags:
    - linux
  dependencies:
    - assets
    - assets_nonwindows
    - exec_linux
    - assets_zh-CN
    - mat_submodules
  script: ./.ci/pack-linux.sh
  variables:
    TARGET_LOCALE: zh-CN
  artifacts:
    paths:
      - dist
  only:
    - tags
    - gitlabci

pack_linux_en-US:
  stage: pack
  tags:
    - linux
  dependencies:
    - assets
    - assets_nonwindows
    - exec_linux
    - assets_en-US
    - mat_submodules
  script: ./.ci/pack-linux.sh
  variables:
    TARGET_LOCALE: en-US
  artifacts:
    paths:
      - dist
  only:
    - tags
    - gitlabci

pack_macos_zh-CN:
  stage: pack
  tags:
    - linux
  dependencies:
    - assets
    - assets_nonwindows
    - exec_macos
    - assets_zh-CN
    - mat_submodules
  script: ./.ci/pack-macos.sh
  variables:
    TARGET_LOCALE: zh-CN
  artifacts:
    paths:
      - dist
  only:
    - tags
    - gitlabci

pack_macos_en-US:
  stage: pack
  tags:
    - linux
  dependencies:
    - assets
    - assets_nonwindows
    - exec_macos
    - assets_en-US
    - mat_submodules
  script: ./.ci/pack-macos.sh
  variables:
    TARGET_LOCALE: en-US
  artifacts:
    paths:
      - dist
  only:
    - tags
    - gitlabci

upload:
  stage: deploy
  dependencies:
    - pack_windows_zh-CN
    - pack_linux_zh-CN
    - pack_macos_zh-CN
    - pack_windows_en-US
    - pack_linux_en-US
    - pack_macos_en-US
  tags: 
    - linux
  variables:
    appVersion: $CI_COMMIT_TAG
  script: ./.ci/upload-packager.sh
  only:
    - tags
